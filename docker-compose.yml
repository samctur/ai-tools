version: "3.8"
services:
  fastapi:
    build:
      context: .
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./app:/app/app
    command: uvicorn app.fastApi:app --host 0.0.0.0 --port 8000
    depends_on:
      - rabbitmq

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"     # Broker
      - "15672:15672"   # Web UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  db:
    image: ankane/pgvector
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ai-tools
    ports:
      - "5434:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 5

  mcp-server:
    build:
      context: .
    env_file:
      - .env
    volumes:
      - ./app:/app/app
    command: python app/mcpServer.py
    ports:
      - "8080:8000"
    depends_on:
      - db

  image-gen-worker:
    build:
      context: .
    env_file:
      - .env
    volumes:
      - ./app:/app/app
      - ./worker_output/image_gen_worker:/app/output
    command: python app/workers/imageGenWorker.py
    depends_on:
      - rabbitmq
    deploy:
      replicas: 2  # number of workers
      resources:
        limits:
          cpus: "0.5"  # Optional: Limit CPU usage if needed
          memory: 500M  # Optional: Limit memory usage if needed
    environment:
      POSTGRES_URL: postgresql://postgres:postgres@db/ai-tools

  logger:
    build:
      context: .
    env_file:
      - .env
    volumes:
      - ./app:/app/app
      - ./worker_output:/app/output
    command: python app/workers/logger.py
    depends_on:
      - rabbitmq
    deploy:
      replicas: 1  # only one logger needed
      resources:
        limits:
          cpus: "0.2"  # Optional: Limit CPU usage
          memory: 100M  # Optional: Limit memory usage
volumes:
  pgdata: